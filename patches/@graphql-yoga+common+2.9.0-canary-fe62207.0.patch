diff --git a/node_modules/@graphql-yoga/common/GraphQLYogaError.d.mts b/node_modules/@graphql-yoga/common/GraphQLYogaError.d.mts
new file mode 100644
index 0000000..0b75393
--- /dev/null
+++ b/node_modules/@graphql-yoga/common/GraphQLYogaError.d.mts
@@ -0,0 +1,2 @@
+import { EnvelopError } from '@envelop/core';
+export { EnvelopError as GraphQLYogaError };
diff --git a/node_modules/@graphql-yoga/common/encodeString.d.mts b/node_modules/@graphql-yoga/common/encodeString.d.mts
new file mode 100644
index 0000000..b1c0f79
--- /dev/null
+++ b/node_modules/@graphql-yoga/common/encodeString.d.mts
@@ -0,0 +1,2 @@
+declare let encodeString: (str: string) => Uint8Array;
+export { encodeString };
diff --git a/node_modules/@graphql-yoga/common/graphiqlHTML.d.mts b/node_modules/@graphql-yoga/common/graphiqlHTML.d.mts
new file mode 100644
index 0000000..00ba96f
--- /dev/null
+++ b/node_modules/@graphql-yoga/common/graphiqlHTML.d.mts
@@ -0,0 +1,2 @@
+declare const _default: "<!DOCTYPE html><html lang=en><head><meta charset=utf-8><title>__TITLE__</title><link rel=icon href=https://www.graphql-yoga.com/favicon.ico><link rel=stylesheet href=https://unpkg.com/@graphql-yoga/graphiql@2.4.0/dist/style.css></head><body id=body class=no-focus-outline><noscript>You need to enable JavaScript to run this app.</noscript><div id=root></div><script type=module>import{renderYogaGraphiQL}from\"https://unpkg.com/@graphql-yoga/graphiql@2.4.0\";renderYogaGraphiQL(root,__OPTS__)</script></body></html>";
+export default _default;
diff --git a/node_modules/@graphql-yoga/common/index.d.mts b/node_modules/@graphql-yoga/common/index.d.mts
new file mode 100644
index 0000000..d0c0638
--- /dev/null
+++ b/node_modules/@graphql-yoga/common/index.d.mts
@@ -0,0 +1,9 @@
+export * from './types.js';
+export * from './logger.js';
+export * from './server.js';
+export * from '@envelop/core';
+export * from '@graphql-yoga/subscription';
+export { CORSOptions } from './plugins/useCORS.js';
+export { GraphiQLOptions, shouldRenderGraphiQL, renderGraphiQL, } from './plugins/useGraphiQL.js';
+export { GraphQLYogaError } from './GraphQLYogaError.js';
+export { Plugin } from './plugins/types.js';
diff --git a/node_modules/@graphql-yoga/common/logger.d.mts b/node_modules/@graphql-yoga/common/logger.d.mts
new file mode 100644
index 0000000..8137303
--- /dev/null
+++ b/node_modules/@graphql-yoga/common/logger.d.mts
@@ -0,0 +1,14 @@
+declare type MessageTransformer = (msg: string) => string;
+export declare const warnColor: MessageTransformer;
+export declare const infoColor: MessageTransformer;
+export declare const errorColor: MessageTransformer;
+export declare const debugColor: MessageTransformer;
+export declare const titleBold: MessageTransformer;
+export interface YogaLogger {
+    debug: (...args: any[]) => void;
+    info: (...args: any[]) => void;
+    warn: (...args: any[]) => void;
+    error: (...args: any[]) => void;
+}
+export declare const defaultYogaLogger: YogaLogger;
+export {};
diff --git a/node_modules/@graphql-yoga/common/package.json b/node_modules/@graphql-yoga/common/package.json
index 8f3ad28..eb8cb5a 100644
--- a/node_modules/@graphql-yoga/common/package.json
+++ b/node_modules/@graphql-yoga/common/package.json
@@ -43,11 +43,11 @@
         "default": "./index.js"
       },
       "import": {
-        "types": "./index.d.ts",
+        "types": "./index.d.mts",
         "default": "./index.mjs"
       },
       "default": {
-        "types": "./index.d.ts",
+        "types": "./index.d.mts",
         "default": "./index.mjs"
       }
     },
@@ -57,11 +57,11 @@
         "default": "./*.js"
       },
       "import": {
-        "types": "./*.d.ts",
+        "types": "./*.d.mts",
         "default": "./*.mjs"
       },
       "default": {
-        "types": "./*.d.ts",
+        "types": "./*.d.mts",
         "default": "./*.mjs"
       }
     },
diff --git a/node_modules/@graphql-yoga/common/plugins/requestParser/GET.d.mts b/node_modules/@graphql-yoga/common/plugins/requestParser/GET.d.mts
new file mode 100644
index 0000000..476c534
--- /dev/null
+++ b/node_modules/@graphql-yoga/common/plugins/requestParser/GET.d.mts
@@ -0,0 +1,3 @@
+import { GraphQLParams } from '../../types.js';
+export declare function isGETRequest(request: Request): boolean;
+export declare function parseGETRequest(request: Request): GraphQLParams;
diff --git a/node_modules/@graphql-yoga/common/plugins/requestParser/POSTFormUrlEncoded.d.mts b/node_modules/@graphql-yoga/common/plugins/requestParser/POSTFormUrlEncoded.d.mts
new file mode 100644
index 0000000..9ed4408
--- /dev/null
+++ b/node_modules/@graphql-yoga/common/plugins/requestParser/POSTFormUrlEncoded.d.mts
@@ -0,0 +1,3 @@
+import { GraphQLParams } from '../../types.js';
+export declare function isPOSTFormUrlEncodedRequest(request: Request): boolean;
+export declare function parsePOSTFormUrlEncodedRequest(request: Request): Promise<GraphQLParams>;
diff --git a/node_modules/@graphql-yoga/common/plugins/requestParser/POSTGraphQLString.d.mts b/node_modules/@graphql-yoga/common/plugins/requestParser/POSTGraphQLString.d.mts
new file mode 100644
index 0000000..f118327
--- /dev/null
+++ b/node_modules/@graphql-yoga/common/plugins/requestParser/POSTGraphQLString.d.mts
@@ -0,0 +1,3 @@
+import { GraphQLParams } from '../../types.js';
+export declare function isPOSTGraphQLStringRequest(request: Request): boolean;
+export declare function parsePOSTGraphQLStringRequest(request: Request): Promise<GraphQLParams>;
diff --git a/node_modules/@graphql-yoga/common/plugins/requestParser/POSTJson.d.mts b/node_modules/@graphql-yoga/common/plugins/requestParser/POSTJson.d.mts
new file mode 100644
index 0000000..4eba641
--- /dev/null
+++ b/node_modules/@graphql-yoga/common/plugins/requestParser/POSTJson.d.mts
@@ -0,0 +1,3 @@
+import { GraphQLParams } from '../../types.js';
+export declare function isPOSTJsonRequest(request: Request): boolean;
+export declare function parsePOSTJsonRequest(request: Request): Promise<GraphQLParams>;
diff --git a/node_modules/@graphql-yoga/common/plugins/requestParser/POSTMultipart.d.mts b/node_modules/@graphql-yoga/common/plugins/requestParser/POSTMultipart.d.mts
new file mode 100644
index 0000000..95ea4eb
--- /dev/null
+++ b/node_modules/@graphql-yoga/common/plugins/requestParser/POSTMultipart.d.mts
@@ -0,0 +1,3 @@
+import { GraphQLParams } from '../../types.js';
+export declare function isPOSTMultipartRequest(request: Request): boolean;
+export declare function parsePOSTMultipartRequest(request: Request): Promise<GraphQLParams>;
diff --git a/node_modules/@graphql-yoga/common/plugins/requestParser/utils.d.mts b/node_modules/@graphql-yoga/common/plugins/requestParser/utils.d.mts
new file mode 100644
index 0000000..e340ced
--- /dev/null
+++ b/node_modules/@graphql-yoga/common/plugins/requestParser/utils.d.mts
@@ -0,0 +1,3 @@
+import { GraphQLParams } from '../../types.js';
+export declare function parseURLSearchParams(requestBody: string): GraphQLParams;
+export declare function isContentTypeMatch(request: Request, expectedContentType: string): boolean;
diff --git a/node_modules/@graphql-yoga/common/plugins/resultProcessor/multipart.d.mts b/node_modules/@graphql-yoga/common/plugins/resultProcessor/multipart.d.mts
new file mode 100644
index 0000000..03851cc
--- /dev/null
+++ b/node_modules/@graphql-yoga/common/plugins/resultProcessor/multipart.d.mts
@@ -0,0 +1,4 @@
+import { ExecutionPatchResult, FetchAPI } from '../../types.js';
+import { ResultProcessorInput } from '../types.js';
+export declare function isMultipartResult(request: Request, result: ResultProcessorInput): result is AsyncIterable<ExecutionPatchResult>;
+export declare function processMultipartResult(executionPatchResultIterable: AsyncIterable<ExecutionPatchResult>, fetchAPI: FetchAPI): Response;
diff --git a/node_modules/@graphql-yoga/common/plugins/resultProcessor/push.d.mts b/node_modules/@graphql-yoga/common/plugins/resultProcessor/push.d.mts
new file mode 100644
index 0000000..1229909
--- /dev/null
+++ b/node_modules/@graphql-yoga/common/plugins/resultProcessor/push.d.mts
@@ -0,0 +1,5 @@
+import { ExecutionResult } from 'graphql';
+import { FetchAPI } from '../../types.js';
+import { ResultProcessorInput } from '../types.js';
+export declare function isPushResult(request: Request, result: ResultProcessorInput): result is AsyncIterable<ExecutionResult>;
+export declare function processPushResult(result: AsyncIterable<ExecutionResult>, fetchAPI: FetchAPI): Response;
diff --git a/node_modules/@graphql-yoga/common/plugins/resultProcessor/regular.d.mts b/node_modules/@graphql-yoga/common/plugins/resultProcessor/regular.d.mts
new file mode 100644
index 0000000..55c2a7c
--- /dev/null
+++ b/node_modules/@graphql-yoga/common/plugins/resultProcessor/regular.d.mts
@@ -0,0 +1,5 @@
+import { ExecutionResult } from 'graphql';
+import { FetchAPI } from '../../types.js';
+import { ResultProcessorInput } from '../types.js';
+export declare function isRegularResult(request: Request, result: ResultProcessorInput): result is ExecutionResult;
+export declare function processRegularResult(executionResult: ExecutionResult, fetchAPI: FetchAPI): Response;
diff --git a/node_modules/@graphql-yoga/common/plugins/types.d.mts b/node_modules/@graphql-yoga/common/plugins/types.d.mts
new file mode 100644
index 0000000..09b5ab7
--- /dev/null
+++ b/node_modules/@graphql-yoga/common/plugins/types.d.mts
@@ -0,0 +1,64 @@
+import { Plugin as EnvelopPlugin, PromiseOrValue } from '@envelop/core';
+import { ExecutionResult } from 'graphql';
+import { ExecutionPatchResult, FetchAPI, GraphQLParams, YogaInitialContext } from '../types.js';
+export declare type Plugin<PluginContext extends Record<string, any> = {}, TServerContext = {}, TUserContext = {}> = EnvelopPlugin<PluginContext> & {
+    /**
+     * Use this hook with your own risk. It is still experimental and may change in the future.
+     * @internal
+     */
+    onRequest?: OnRequestHook<TServerContext>;
+    /**
+     * Use this hook with your own risk. It is still experimental and may change in the future.
+     * @internal
+     */
+    onRequestParse?: OnRequestParseHook<TServerContext>;
+    /**
+     * Use this hook with your own risk. It is still experimental and may change in the future.
+     * @internal
+     */
+    onResultProcess?: OnResultProcess<TServerContext & TUserContext & YogaInitialContext>;
+    /**
+     * Use this hook with your own risk. It is still experimental and may change in the future.
+     * @internal
+     */
+    onResponse?: OnResponseHook<TServerContext>;
+};
+export declare type OnRequestHook<TServerContext> = (payload: OnRequestEventPayload<TServerContext>) => PromiseOrValue<void>;
+export interface OnRequestEventPayload<TServerContext> {
+    request: Request;
+    serverContext: TServerContext | undefined;
+    fetchAPI: FetchAPI;
+    endResponse(response: Response): void;
+}
+export declare type OnRequestParseHook<TServerContext> = (payload: OnRequestParseEventPayload<TServerContext>) => PromiseOrValue<void | OnRequestParseHookResult>;
+export declare type RequestParser = (request: Request) => PromiseOrValue<GraphQLParams>;
+export interface OnRequestParseEventPayload<TServerContext> {
+    serverContext: TServerContext | undefined;
+    request: Request;
+    requestParser: RequestParser | undefined;
+    setRequestParser: (parser: RequestParser) => void;
+}
+export declare type OnRequestParseHookResult = {
+    onRequestParseDone?: OnRequestParseDoneHook;
+};
+export declare type OnRequestParseDoneHook = (payload: OnRequestParseDoneEventPayload) => PromiseOrValue<void>;
+export interface OnRequestParseDoneEventPayload {
+    params: GraphQLParams;
+    setParams: (params: GraphQLParams) => void;
+}
+export declare type OnResultProcess<TContext> = (payload: OnResultProcessEventPayload<TContext>) => PromiseOrValue<void>;
+export declare type ResultProcessorInput = PromiseOrValue<ExecutionResult | AsyncIterable<ExecutionResult | ExecutionPatchResult>>;
+export declare type ResultProcessor = (result: ResultProcessorInput, fetchAPI: FetchAPI) => PromiseOrValue<Response>;
+export interface OnResultProcessEventPayload<TContext> {
+    request: Request;
+    context: TContext;
+    result: ResultProcessorInput;
+    resultProcessor: ResultProcessor;
+    setResultProcessor(resultProcessor: ResultProcessor): void;
+}
+export declare type OnResponseHook<TServerContext> = (payload: OnResponseEventPayload<TServerContext>) => PromiseOrValue<void>;
+export interface OnResponseEventPayload<TServerContext> {
+    request: Request;
+    serverContext: TServerContext | undefined;
+    response: Response;
+}
diff --git a/node_modules/@graphql-yoga/common/plugins/useCORS.d.mts b/node_modules/@graphql-yoga/common/plugins/useCORS.d.mts
new file mode 100644
index 0000000..6fe2e40
--- /dev/null
+++ b/node_modules/@graphql-yoga/common/plugins/useCORS.d.mts
@@ -0,0 +1,14 @@
+import { PromiseOrValue } from '@envelop/core';
+import { Plugin } from './types.js';
+export declare type CORSOptions = {
+    origin?: string[] | string;
+    methods?: string[];
+    allowedHeaders?: string[];
+    exposedHeaders?: string[];
+    credentials?: boolean;
+    maxAge?: number;
+} | false;
+export declare type CORSPluginOptions<TServerContext> = ((request: Request, ...args: {} extends TServerContext ? [serverContext?: TServerContext | undefined] : [serverContext: TServerContext]) => CORSOptions) | CORSOptions | boolean;
+export declare type CORSOptionsFactory<TServerContext> = (request: Request, serverContext: TServerContext) => PromiseOrValue<CORSOptions>;
+export declare function getCORSHeadersByRequestAndOptions(request: Request, corsOptions: CORSOptions): Record<string, string>;
+export declare function useCORS<TServerContext>(options?: CORSPluginOptions<TServerContext>): Plugin;
diff --git a/node_modules/@graphql-yoga/common/plugins/useGraphiQL.d.mts b/node_modules/@graphql-yoga/common/plugins/useGraphiQL.d.mts
new file mode 100644
index 0000000..2243e2c
--- /dev/null
+++ b/node_modules/@graphql-yoga/common/plugins/useGraphiQL.d.mts
@@ -0,0 +1,54 @@
+import { PromiseOrValue } from '@envelop/core';
+import { YogaLogger } from '../logger.js';
+import { Plugin } from './types.js';
+export declare function shouldRenderGraphiQL({ headers, method }: Request): boolean;
+export declare type GraphiQLOptions = {
+    /**
+     * An optional GraphQL string to use when no query is provided and no stored
+     * query exists from a previous session.  If undefined is provided, GraphiQL
+     * will use its own default query.
+     */
+    defaultQuery?: string;
+    /**
+     * Whether to open the variable editor by default. Defaults to `true`.
+     */
+    defaultVariableEditorOpen?: boolean;
+    /**
+     * The endpoint requests should be sent. Defaults to `"/graphql"`.
+     */
+    endpoint?: string;
+    /**
+     * The initial headers to render inside the header editor. Defaults to `"{}"`.
+     */
+    headers?: string;
+    /**
+     * More info there: https://developer.mozilla.org/en-US/docs/Web/API/Request/credentials
+     */
+    credentials?: RequestCredentials;
+    /**
+     * Whether the header editor is enabled. Defaults to `true`.
+     */
+    headerEditorEnabled?: boolean;
+    /**
+     * The title to display at the top of the page. Defaults to `"YogaGraphiQL"`.
+     */
+    title?: string;
+    /**
+     * Protocol for subscriptions
+     */
+    subscriptionsProtocol?: 'SSE' | 'WS' | 'LEGACY_WS';
+    /**
+     * Extra headers you always want to pass with users' headers input
+     */
+    additionalHeaders?: Record<string, string>;
+};
+export declare const renderGraphiQL: (opts?: GraphiQLOptions) => string;
+export declare type GraphiQLOptionsFactory<TServerContext> = (request: Request, ...args: {} extends TServerContext ? [serverContext?: TServerContext | undefined] : [serverContext: TServerContext]) => PromiseOrValue<GraphiQLOptions | boolean>;
+export declare type GraphiQLOptionsOrFactory<TServerContext> = GraphiQLOptions | GraphiQLOptionsFactory<TServerContext> | boolean;
+export interface GraphiQLPluginConfig<TServerContext> {
+    endpoint?: string;
+    options?: GraphiQLOptionsOrFactory<TServerContext>;
+    render?(options?: GraphiQLOptions): PromiseOrValue<BodyInit>;
+    logger?: YogaLogger;
+}
+export declare function useGraphiQL<TServerContext>(config?: GraphiQLPluginConfig<TServerContext>): Plugin;
diff --git a/node_modules/@graphql-yoga/common/plugins/useHealthCheck.d.mts b/node_modules/@graphql-yoga/common/plugins/useHealthCheck.d.mts
new file mode 100644
index 0000000..8bb3043
--- /dev/null
+++ b/node_modules/@graphql-yoga/common/plugins/useHealthCheck.d.mts
@@ -0,0 +1,7 @@
+import { YogaLogger } from '../logger.js';
+import { Plugin } from './types.js';
+export interface HealthCheckPluginOptions {
+    id?: string;
+    logger?: YogaLogger;
+}
+export declare function useHealthCheck(options?: HealthCheckPluginOptions): Plugin;
diff --git a/node_modules/@graphql-yoga/common/plugins/useRequestParser.d.mts b/node_modules/@graphql-yoga/common/plugins/useRequestParser.d.mts
new file mode 100644
index 0000000..6ebc8ee
--- /dev/null
+++ b/node_modules/@graphql-yoga/common/plugins/useRequestParser.d.mts
@@ -0,0 +1,9 @@
+import { Plugin } from './types.js';
+import { PromiseOrValue } from '@envelop/core';
+import { GraphQLParams } from '../types.js';
+interface RequestParserPluginOptions {
+    match?(request: Request): boolean;
+    parse(request: Request): PromiseOrValue<GraphQLParams>;
+}
+export declare function useRequestParser(options: RequestParserPluginOptions): Plugin;
+export {};
diff --git a/node_modules/@graphql-yoga/common/plugins/useResultProcessor.d.mts b/node_modules/@graphql-yoga/common/plugins/useResultProcessor.d.mts
new file mode 100644
index 0000000..d0c564d
--- /dev/null
+++ b/node_modules/@graphql-yoga/common/plugins/useResultProcessor.d.mts
@@ -0,0 +1,6 @@
+import { Plugin, ResultProcessor, ResultProcessorInput } from './types.js';
+export interface ResultProcessorPluginOptions {
+    processResult: ResultProcessor;
+    match?(request: Request, result: ResultProcessorInput): boolean;
+}
+export declare function useResultProcessor(options: ResultProcessorPluginOptions): Plugin;
diff --git a/node_modules/@graphql-yoga/common/processRequest.d.mts b/node_modules/@graphql-yoga/common/processRequest.d.mts
new file mode 100644
index 0000000..d2f6f88
--- /dev/null
+++ b/node_modules/@graphql-yoga/common/processRequest.d.mts
@@ -0,0 +1,10 @@
+import { FetchAPI, RequestProcessContext } from './types.js';
+interface ErrorResponseParams {
+    status?: number;
+    headers?: Record<string, string>;
+    errors: readonly Error[];
+    fetchAPI: FetchAPI;
+}
+export declare function getErrorResponse({ status, headers, errors, fetchAPI, }: ErrorResponseParams): Response;
+export declare function processRequest<TContext, TRootValue = {}>({ request, params, enveloped, fetchAPI, onResultProcessHooks, }: RequestProcessContext<TContext, TRootValue>): Promise<Response>;
+export {};
diff --git a/node_modules/@graphql-yoga/common/server.d.mts b/node_modules/@graphql-yoga/common/server.d.mts
new file mode 100644
index 0000000..4c2c0b4
--- /dev/null
+++ b/node_modules/@graphql-yoga/common/server.d.mts
@@ -0,0 +1,111 @@
+import { GraphQLSchema } from 'graphql';
+import { GetEnvelopedFn, UseMaskedErrorsOpts, PromiseOrValue } from '@envelop/core';
+import { ValidationCache } from '@envelop/validation-cache';
+import { ParserCacheOptions } from '@envelop/parser-cache';
+import { ExecutionResult, IResolvers, TypeSource } from '@graphql-tools/utils';
+import { GraphQLServerInject, YogaInitialContext, FetchAPI } from './types.js';
+import { Plugin } from './plugins/types.js';
+import { YogaLogger } from './logger.js';
+import { CORSPluginOptions } from './plugins/useCORS.js';
+import { GraphiQLOptions, GraphiQLOptionsOrFactory } from './plugins/useGraphiQL.js';
+interface OptionsWithPlugins<TContext> {
+    /**
+     * Envelop Plugins
+     * @see https://envelop.dev/plugins
+     */
+    plugins: Array<Plugin<TContext> | Plugin | {}>;
+}
+/**
+ * Configuration options for the server
+ */
+export declare type YogaServerOptions<TServerContext extends Record<string, any>, TUserContext extends Record<string, any>, TRootValue> = {
+    /**
+     * Enable/disable logging or provide a custom logger.
+     * @default true
+     */
+    logging?: boolean | YogaLogger;
+    /**
+     * Prevent leaking unexpected errors to the client. We highly recommend enabling this in production.
+     * If you throw `GraphQLYogaError`/`EnvelopError` within your GraphQL resolvers then that error will be sent back to the client.
+     *
+     * You can lean more about this here:
+     * @see https://graphql-yoga.vercel.app/docs/features/error-masking
+     *
+     * Default: `true`
+     */
+    maskedErrors?: boolean | UseMaskedErrorsOpts;
+    /**
+     * Context
+     */
+    context?: ((initialContext: YogaInitialContext & TServerContext) => Promise<TUserContext> | TUserContext) | Promise<TUserContext> | TUserContext;
+    cors?: CORSPluginOptions<TServerContext>;
+    /**
+     * GraphQL endpoint
+     */
+    endpoint?: string;
+    /**
+     * GraphiQL options
+     *
+     * Default: `true`
+     */
+    graphiql?: GraphiQLOptionsOrFactory<TServerContext>;
+    renderGraphiQL?: (options?: GraphiQLOptions) => PromiseOrValue<BodyInit>;
+    schema?: GraphQLSchema | {
+        typeDefs: TypeSource;
+        resolvers?: IResolvers<TRootValue, TUserContext & TServerContext & YogaInitialContext> | Array<IResolvers<TRootValue, TUserContext & TServerContext & YogaInitialContext>>;
+    };
+    parserCache?: boolean | ParserCacheOptions;
+    validationCache?: boolean | ValidationCache;
+    fetchAPI?: Partial<FetchAPI>;
+    multipart?: boolean;
+    id?: string;
+} & Partial<OptionsWithPlugins<TUserContext & TServerContext & YogaInitialContext>>;
+export declare function getDefaultSchema(): GraphQLSchema;
+/**
+ * Base class that can be extended to create a GraphQL server with any HTTP server framework.
+ * @internal
+ */
+export declare class YogaServer<TServerContext extends Record<string, any>, TUserContext extends Record<string, any>, TRootValue> {
+    /**
+     * Instance of envelop
+     */
+    readonly getEnveloped: GetEnvelopedFn<TUserContext & TServerContext & YogaInitialContext>;
+    logger: YogaLogger;
+    protected endpoint?: string;
+    protected fetchAPI: FetchAPI;
+    protected plugins: Array<Plugin<TUserContext & TServerContext & YogaInitialContext, TServerContext>>;
+    private onRequestParseHooks;
+    private onRequestHooks;
+    private onResultProcessHooks;
+    private onResponseHooks;
+    private id;
+    constructor(options?: YogaServerOptions<TServerContext, TUserContext, TRootValue>);
+    getResponse(request: Request, ...args: {} extends TServerContext ? [serverContext?: TServerContext | undefined] : [serverContext: TServerContext]): Promise<Response>;
+    handleRequest: (request: Request, ...args: {} extends TServerContext ? [serverContext?: TServerContext | undefined] : [serverContext: TServerContext]) => Promise<Response>;
+    /**
+     * Testing utility to mock http request for GraphQL endpoint
+     *
+     *
+     * Example - Test a simple query
+     * ```ts
+     * const { response, executionResult } = await yoga.inject({
+     *  document: "query { ping }",
+     * })
+     * expect(response.status).toBe(200)
+     * expect(executionResult.data.ping).toBe('pong')
+     * ```
+     **/
+    inject<TData = any, TVariables = any>({ document, variables, operationName, headers, serverContext, }: GraphQLServerInject<TData, TVariables, TServerContext>): Promise<{
+        response: Response;
+        executionResult: ExecutionResult<TData> | null;
+    }>;
+    fetch: WindowOrWorkerGlobalScope['fetch'];
+    private fetchEventListener;
+    start(): void;
+    stop(): void;
+}
+export declare type YogaServerInstance<TServerContext, TUserContext, TRootValue> = YogaServer<TServerContext, TUserContext, TRootValue> & (WindowOrWorkerGlobalScope['fetch'] | ((context: {
+    request: Request;
+}) => Promise<Response>));
+export declare function createServer<TServerContext extends Record<string, any> = {}, TUserContext extends Record<string, any> = {}, TRootValue = {}>(options?: YogaServerOptions<TServerContext, TUserContext, TRootValue>): YogaServerInstance<TServerContext, TUserContext, TRootValue>;
+export {};
diff --git a/node_modules/@graphql-yoga/common/types.d.mts b/node_modules/@graphql-yoga/common/types.d.mts
new file mode 100644
index 0000000..8bc132f
--- /dev/null
+++ b/node_modules/@graphql-yoga/common/types.d.mts
@@ -0,0 +1,119 @@
+import type { DocumentNode, ExecutionResult, GraphQLError, OperationDefinitionNode } from 'graphql';
+import type { TypedDocumentNode } from '@graphql-typed-document-node/core';
+import { GetEnvelopedFn, PromiseOrValue } from '@envelop/core';
+import { OnResultProcess } from './plugins/types';
+export interface ExecutionPatchResult<TData = {
+    [key: string]: any;
+}, TExtensions = {
+    [key: string]: any;
+}> {
+    errors?: ReadonlyArray<GraphQLError>;
+    data?: TData | null;
+    path?: ReadonlyArray<string | number>;
+    label?: string;
+    hasNext: boolean;
+    extensions?: TExtensions;
+}
+export interface GraphQLParams<TVariables = Record<string, any>, TExtensions = Record<string, any>> {
+    operationName?: string;
+    query?: string;
+    variables?: TVariables;
+    extensions?: TExtensions;
+}
+export interface FormatPayloadParams<TContext, TRootValue> {
+    payload: ExecutionResult | ExecutionPatchResult;
+    context?: TContext;
+    document?: DocumentNode;
+    operation?: OperationDefinitionNode;
+    rootValue?: TRootValue;
+}
+export interface YogaInitialContext {
+    /**
+     * A Document containing GraphQL Operations and Fragments to execute.
+     */
+    query?: string | DocumentNode;
+    /**
+     * An object describing the HTTP request.
+     */
+    request: Request;
+    /**
+     * The name of the Operation in the Document to execute.
+     */
+    operationName?: string;
+    /**
+     * Values for any Variables defined by the Operation.
+     */
+    variables?: Record<string, any>;
+    /**
+     * Additional extensions object sent by the client.
+     */
+    extensions?: Record<string, any>;
+}
+export interface RequestProcessContext<TContext, TRootValue> {
+    request: Request;
+    enveloped: ReturnType<GetEnvelopedFn<TContext>>;
+    params: GraphQLParams;
+    fetchAPI: FetchAPI;
+    /**
+     * Response Hooks
+     */
+    onResultProcessHooks: OnResultProcess<any>[];
+}
+export declare type CORSOptions = {
+    origin?: string[] | string;
+    methods?: string[];
+    allowedHeaders?: string[];
+    exposedHeaders?: string[];
+    credentials?: boolean;
+    maxAge?: number;
+} | false;
+export declare type GraphQLServerInject<TData = any, TVariables = Record<string, any>, TServerContext extends Record<string, any> = Record<string, any>> = {
+    /** GraphQL Operation to execute */
+    document: string | TypedDocumentNode<TData, TVariables>;
+    /** Variables for GraphQL Operation */
+    variables?: TVariables;
+    /** Name for GraphQL Operation */
+    operationName?: string;
+    /** Set any headers for the GraphQL request */
+    headers?: HeadersInit;
+} & ({} extends TServerContext ? {
+    serverContext?: TServerContext;
+} : {
+    serverContext: TServerContext;
+});
+export { EnvelopError as GraphQLYogaError } from '@envelop/core';
+declare global {
+    interface ReadableStream<R = any> {
+        [Symbol.asyncIterator]: () => AsyncIterator<R>;
+    }
+}
+export declare type FetchEvent = Event & {
+    respondWith: (response: PromiseOrValue<Response>) => void;
+    request: Request;
+};
+export declare type FetchAPI = {
+    /**
+     * WHATWG compliant Request object constructor
+     * Default: `Request` from `cross-undici-fetch`
+     * @see https://developer.mozilla.org/en-US/docs/Web/API/Request
+     */
+    Request: typeof Request;
+    /**
+     * WHATWG compliant Response object constructor
+     * Default: `Response` from `cross-undici-fetch`
+     * @see https://developer.mozilla.org/en-US/docs/Web/API/Response
+     */
+    Response: typeof Response;
+    /**
+     * WHATWG compliant fetch function
+     * Default: `fetch` from `cross-undici-fetch`
+     * @see https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/fetch
+     */
+    fetch: typeof fetch;
+    /**
+     * WHATWG compliant ReadableStream object constructor
+     * Default: `ReadableStream` from `cross-undici-fetch`
+     * @see https://developer.mozilla.org/en-US/docs/Web/API/ReadableStream
+     */
+    ReadableStream: typeof ReadableStream;
+};
