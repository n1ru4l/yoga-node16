diff --git a/node_modules/@graphql-yoga/subscription/createPubSub.d.mts b/node_modules/@graphql-yoga/subscription/createPubSub.d.mts
new file mode 100644
index 0000000..f0b3bfb
--- /dev/null
+++ b/node_modules/@graphql-yoga/subscription/createPubSub.d.mts
@@ -0,0 +1,42 @@
+import { Repeater } from '@repeaterjs/repeater';
+import { TypedEventTarget } from './typed-event-target';
+declare type PubSubPublishArgsByKey = {
+    [key: string]: [] | [any] | [number | string, any];
+};
+declare type EventAPI = {
+    Event: typeof Event;
+    EventTarget: typeof EventTarget;
+};
+export declare type PubSubEvent<TPubSubPublishArgsByKey extends PubSubPublishArgsByKey, TKey extends Extract<keyof TPubSubPublishArgsByKey, string>> = Event & {
+    data?: TPubSubPublishArgsByKey[TKey][1] extends undefined ? TPubSubPublishArgsByKey[TKey][0] : TPubSubPublishArgsByKey[TKey][1];
+};
+export declare type PubSubEventTarget<TPubSubPublishArgsByKey extends PubSubPublishArgsByKey> = TypedEventTarget<PubSubEvent<TPubSubPublishArgsByKey, Extract<keyof TPubSubPublishArgsByKey, string>>>;
+export declare type ChannelPubSubConfig<TPubSubPublishArgsByKey extends PubSubPublishArgsByKey> = {
+    /**
+     * The event target. If not specified an (in-memory) EventTarget will be created.
+     * For multiple server replica or serverless environments a distributed EventTarget is recommended.
+     *
+     * An event dispatched on the event target MUST have a `data` property.
+     */
+    eventTarget?: PubSubEventTarget<TPubSubPublishArgsByKey>;
+    /**
+     * Event and EventTarget implementation.
+     * Providing this is mandatory for a Node.js versions below 16.
+     */
+    event?: EventAPI;
+};
+export declare type PubSub<TPubSubPublishArgsByKey extends PubSubPublishArgsByKey> = {
+    /**
+     * Publish a value for a given topic.
+     */
+    publish<TKey extends Extract<keyof TPubSubPublishArgsByKey, string>>(routingKey: TKey, ...args: TPubSubPublishArgsByKey[TKey]): void;
+    /**
+     * Subscribe to a topic.
+     */
+    subscribe<TKey extends Extract<keyof TPubSubPublishArgsByKey, string>>(...[routingKey, id]: TPubSubPublishArgsByKey[TKey][1] extends undefined ? [TKey] : [TKey, TPubSubPublishArgsByKey[TKey][0]]): Repeater<TPubSubPublishArgsByKey[TKey][1] extends undefined ? TPubSubPublishArgsByKey[TKey][0] : TPubSubPublishArgsByKey[TKey][1]>;
+};
+/**
+ * Utility for publishing and subscribing to events.
+ */
+export declare const createPubSub: <TPubSubPublishArgsByKey extends PubSubPublishArgsByKey>(config?: ChannelPubSubConfig<TPubSubPublishArgsByKey> | undefined) => PubSub<TPubSubPublishArgsByKey>;
+export {};
diff --git a/node_modules/@graphql-yoga/subscription/createPubSub.spec.d.ts b/node_modules/@graphql-yoga/subscription/createPubSub.spec.d.ts
deleted file mode 100644
index cb0ff5c..0000000
--- a/node_modules/@graphql-yoga/subscription/createPubSub.spec.d.ts
+++ /dev/null
@@ -1 +0,0 @@
-export {};
diff --git a/node_modules/@graphql-yoga/subscription/index.d.mts b/node_modules/@graphql-yoga/subscription/index.d.mts
new file mode 100644
index 0000000..60dd181
--- /dev/null
+++ b/node_modules/@graphql-yoga/subscription/index.d.mts
@@ -0,0 +1,6 @@
+export { Repeater } from '@repeaterjs/repeater';
+export { createPubSub, PubSub } from './createPubSub.js';
+export type { PubSubEventTarget, PubSubEvent } from './createPubSub.js';
+export { map } from './operator/map.js';
+export { filter } from './operator/filter.js';
+export { pipe } from './utils/pipe.js';
diff --git a/node_modules/@graphql-yoga/subscription/operator/filter.d.mts b/node_modules/@graphql-yoga/subscription/operator/filter.d.mts
new file mode 100644
index 0000000..e5885f4
--- /dev/null
+++ b/node_modules/@graphql-yoga/subscription/operator/filter.d.mts
@@ -0,0 +1,6 @@
+import { Repeater } from '@repeaterjs/repeater';
+/**
+ * Utility for filtering an event stream.
+ */
+export declare function filter<T, U extends T>(filter: (input: T) => input is U): (source: AsyncIterable<T>) => Repeater<U, void, unknown>;
+export declare function filter<T>(filter: (input: T) => boolean): (source: AsyncIterable<T>) => Repeater<T, void, unknown>;
diff --git a/node_modules/@graphql-yoga/subscription/operator/filter.spec.d.ts b/node_modules/@graphql-yoga/subscription/operator/filter.spec.d.ts
deleted file mode 100644
index cb0ff5c..0000000
--- a/node_modules/@graphql-yoga/subscription/operator/filter.spec.d.ts
+++ /dev/null
@@ -1 +0,0 @@
-export {};
diff --git a/node_modules/@graphql-yoga/subscription/operator/map.d.mts b/node_modules/@graphql-yoga/subscription/operator/map.d.mts
new file mode 100644
index 0000000..0637c5b
--- /dev/null
+++ b/node_modules/@graphql-yoga/subscription/operator/map.d.mts
@@ -0,0 +1,5 @@
+import { Repeater } from '@repeaterjs/repeater';
+/**
+ * Utility for mapping an event stream.
+ */
+export declare const map: <T, O>(mapper: (input: T) => O | Promise<O>) => (source: AsyncIterable<T>) => Repeater<O, any, unknown>;
diff --git a/node_modules/@graphql-yoga/subscription/operator/map.spec.d.ts b/node_modules/@graphql-yoga/subscription/operator/map.spec.d.ts
deleted file mode 100644
index cb0ff5c..0000000
--- a/node_modules/@graphql-yoga/subscription/operator/map.spec.d.ts
+++ /dev/null
@@ -1 +0,0 @@
-export {};
diff --git a/node_modules/@graphql-yoga/subscription/package.json b/node_modules/@graphql-yoga/subscription/package.json
index 2f6ec21..9a22de2 100644
--- a/node_modules/@graphql-yoga/subscription/package.json
+++ b/node_modules/@graphql-yoga/subscription/package.json
@@ -32,11 +32,11 @@
         "default": "./index.js"
       },
       "import": {
-        "types": "./index.d.ts",
+        "types": "./index.d.mts",
         "default": "./index.mjs"
       },
       "default": {
-        "types": "./index.d.ts",
+        "types": "./index.d.mts",
         "default": "./index.mjs"
       }
     },
@@ -46,11 +46,11 @@
         "default": "./*.js"
       },
       "import": {
-        "types": "./*.d.ts",
+        "types": "./*.d.mts",
         "default": "./*.mjs"
       },
       "default": {
-        "types": "./*.d.ts",
+        "types": "./*.d.mts",
         "default": "./*.mjs"
       }
     },
diff --git a/node_modules/@graphql-yoga/subscription/typed-event-target.d.mts b/node_modules/@graphql-yoga/subscription/typed-event-target.d.mts
new file mode 100644
index 0000000..9f0d30e
--- /dev/null
+++ b/node_modules/@graphql-yoga/subscription/typed-event-target.d.mts
@@ -0,0 +1,12 @@
+export interface TypedEventListener<TEvent extends Event> extends EventListener {
+    (evt: TEvent): void;
+}
+export interface TypedEventListenerObject<TEvent extends Event> extends EventListener {
+    handleEvent(object: TEvent): void;
+}
+export declare type TypedEventListenerOrEventListenerObject<TEvent extends Event> = TypedEventListener<TEvent> | TypedEventListenerObject<TEvent> | null;
+export interface TypedEventTarget<TEvent extends Event> extends EventTarget {
+    addEventListener(type: string, callback: TypedEventListenerOrEventListenerObject<TEvent>, options?: AddEventListenerOptions | boolean): void;
+    dispatchEvent(event: TEvent): boolean;
+    removeEventListener(type: string, callback: TypedEventListenerOrEventListenerObject<TEvent>, options?: EventListenerOptions | boolean): void;
+}
diff --git a/node_modules/@graphql-yoga/subscription/utils/pipe.d.mts b/node_modules/@graphql-yoga/subscription/utils/pipe.d.mts
new file mode 100644
index 0000000..3600d6e
--- /dev/null
+++ b/node_modules/@graphql-yoga/subscription/utils/pipe.d.mts
@@ -0,0 +1,25 @@
+/**
+ * Pipes the value of an expression into a pipeline of functions.
+ *
+ * @source https://github.com/gcanti/fp-ts/blob/b442f0967b002b88eb2649ba38d95ec5ad2ab576/src/function.ts#L391-L682
+ */
+export declare function pipe<A>(a: A): A;
+export declare function pipe<A, B>(a: A, ab: (a: A) => B): B;
+export declare function pipe<A, B, C>(a: A, ab: (a: A) => B, bc: (b: B) => C): C;
+export declare function pipe<A, B, C, D>(a: A, ab: (a: A) => B, bc: (b: B) => C, cd: (c: C) => D): D;
+export declare function pipe<A, B, C, D, E>(a: A, ab: (a: A) => B, bc: (b: B) => C, cd: (c: C) => D, de: (d: D) => E): E;
+export declare function pipe<A, B, C, D, E, F>(a: A, ab: (a: A) => B, bc: (b: B) => C, cd: (c: C) => D, de: (d: D) => E, ef: (e: E) => F): F;
+export declare function pipe<A, B, C, D, E, F, G>(a: A, ab: (a: A) => B, bc: (b: B) => C, cd: (c: C) => D, de: (d: D) => E, ef: (e: E) => F, fg: (f: F) => G): G;
+export declare function pipe<A, B, C, D, E, F, G, H>(a: A, ab: (a: A) => B, bc: (b: B) => C, cd: (c: C) => D, de: (d: D) => E, ef: (e: E) => F, fg: (f: F) => G, gh: (g: G) => H): H;
+export declare function pipe<A, B, C, D, E, F, G, H, I>(a: A, ab: (a: A) => B, bc: (b: B) => C, cd: (c: C) => D, de: (d: D) => E, ef: (e: E) => F, fg: (f: F) => G, gh: (g: G) => H, hi: (h: H) => I): I;
+export declare function pipe<A, B, C, D, E, F, G, H, I, J>(a: A, ab: (a: A) => B, bc: (b: B) => C, cd: (c: C) => D, de: (d: D) => E, ef: (e: E) => F, fg: (f: F) => G, gh: (g: G) => H, hi: (h: H) => I, ij: (i: I) => J): J;
+export declare function pipe<A, B, C, D, E, F, G, H, I, J, K>(a: A, ab: (a: A) => B, bc: (b: B) => C, cd: (c: C) => D, de: (d: D) => E, ef: (e: E) => F, fg: (f: F) => G, gh: (g: G) => H, hi: (h: H) => I, ij: (i: I) => J, jk: (j: J) => K): K;
+export declare function pipe<A, B, C, D, E, F, G, H, I, J, K, L>(a: A, ab: (a: A) => B, bc: (b: B) => C, cd: (c: C) => D, de: (d: D) => E, ef: (e: E) => F, fg: (f: F) => G, gh: (g: G) => H, hi: (h: H) => I, ij: (i: I) => J, jk: (j: J) => K, kl: (k: K) => L): L;
+export declare function pipe<A, B, C, D, E, F, G, H, I, J, K, L, M>(a: A, ab: (a: A) => B, bc: (b: B) => C, cd: (c: C) => D, de: (d: D) => E, ef: (e: E) => F, fg: (f: F) => G, gh: (g: G) => H, hi: (h: H) => I, ij: (i: I) => J, jk: (j: J) => K, kl: (k: K) => L, lm: (l: L) => M): M;
+export declare function pipe<A, B, C, D, E, F, G, H, I, J, K, L, M, N>(a: A, ab: (a: A) => B, bc: (b: B) => C, cd: (c: C) => D, de: (d: D) => E, ef: (e: E) => F, fg: (f: F) => G, gh: (g: G) => H, hi: (h: H) => I, ij: (i: I) => J, jk: (j: J) => K, kl: (k: K) => L, lm: (l: L) => M, mn: (m: M) => N): N;
+export declare function pipe<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O>(a: A, ab: (a: A) => B, bc: (b: B) => C, cd: (c: C) => D, de: (d: D) => E, ef: (e: E) => F, fg: (f: F) => G, gh: (g: G) => H, hi: (h: H) => I, ij: (i: I) => J, jk: (j: J) => K, kl: (k: K) => L, lm: (l: L) => M, mn: (m: M) => N, no: (n: N) => O): O;
+export declare function pipe<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P>(a: A, ab: (a: A) => B, bc: (b: B) => C, cd: (c: C) => D, de: (d: D) => E, ef: (e: E) => F, fg: (f: F) => G, gh: (g: G) => H, hi: (h: H) => I, ij: (i: I) => J, jk: (j: J) => K, kl: (k: K) => L, lm: (l: L) => M, mn: (m: M) => N, no: (n: N) => O, op: (o: O) => P): P;
+export declare function pipe<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q>(a: A, ab: (a: A) => B, bc: (b: B) => C, cd: (c: C) => D, de: (d: D) => E, ef: (e: E) => F, fg: (f: F) => G, gh: (g: G) => H, hi: (h: H) => I, ij: (i: I) => J, jk: (j: J) => K, kl: (k: K) => L, lm: (l: L) => M, mn: (m: M) => N, no: (n: N) => O, op: (o: O) => P, pq: (p: P) => Q): Q;
+export declare function pipe<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R>(a: A, ab: (a: A) => B, bc: (b: B) => C, cd: (c: C) => D, de: (d: D) => E, ef: (e: E) => F, fg: (f: F) => G, gh: (g: G) => H, hi: (h: H) => I, ij: (i: I) => J, jk: (j: J) => K, kl: (k: K) => L, lm: (l: L) => M, mn: (m: M) => N, no: (n: N) => O, op: (o: O) => P, pq: (p: P) => Q, qr: (q: Q) => R): R;
+export declare function pipe<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S>(a: A, ab: (a: A) => B, bc: (b: B) => C, cd: (c: C) => D, de: (d: D) => E, ef: (e: E) => F, fg: (f: F) => G, gh: (g: G) => H, hi: (h: H) => I, ij: (i: I) => J, jk: (j: J) => K, kl: (k: K) => L, lm: (l: L) => M, mn: (m: M) => N, no: (n: N) => O, op: (o: O) => P, pq: (p: P) => Q, qr: (q: Q) => R, rs: (r: R) => S): S;
+export declare function pipe<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T>(a: A, ab: (a: A) => B, bc: (b: B) => C, cd: (c: C) => D, de: (d: D) => E, ef: (e: E) => F, fg: (f: F) => G, gh: (g: G) => H, hi: (h: H) => I, ij: (i: I) => J, jk: (j: J) => K, kl: (k: K) => L, lm: (l: L) => M, mn: (m: M) => N, no: (n: N) => O, op: (o: O) => P, pq: (p: P) => Q, qr: (q: Q) => R, rs: (r: R) => S, st: (s: S) => T): T;
